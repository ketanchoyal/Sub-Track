// Mocks generated by Mockito 5.0.8 from annotations
// in sub_track/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;
import 'dart:io' as _i22;
import 'dart:typed_data' as _i29;
import 'dart:ui' as _i15;

import 'package:animator/src/animator.dart' as _i6;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:flutter/src/widgets/framework.dart' as _i9;
import 'package:flutter/src/widgets/navigator.dart' as _i10;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i5;
import 'package:hive/hive.dart' as _i4;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i28;
import 'package:hive/src/box/default_key_comparator.dart' as _i27;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked/src/state_management/base_view_models.dart' as _i8;
import 'package:stacked_firebase_auth/src/firebase_authentication_service.dart'
    as _i3;
import 'package:stacked_services/src/bottom_sheet/bottom_sheet_service.dart'
    as _i18;
import 'package:stacked_services/src/dialog/dialog_service.dart' as _i12;
import 'package:stacked_services/src/models/overlay_request.dart' as _i13;
import 'package:stacked_services/src/models/overlay_response.dart' as _i14;
import 'package:stacked_services/src/navigation_service.dart' as _i7;
import 'package:stacked_services/src/snackbar/snackbar_config.dart' as _i17;
import 'package:stacked_services/src/snackbar/snackbar_service.dart' as _i16;
import 'package:sub_track/core/data_source/brand/brand_local.dart' as _i30;
import 'package:sub_track/core/data_source/brand/brand_remote.dart' as _i31;
import 'package:sub_track/core/data_source/subscription/sub_local.dart' as _i32;
import 'package:sub_track/core/data_source/subscription/sub_remote.dart'
    as _i33;
import 'package:sub_track/core/models/subscription/subscription.dart' as _i20;
import 'package:sub_track/core/repository/brand/brand_repo.dart' as _i34;
import 'package:sub_track/core/repository/subscription/subscription_repo.dart'
    as _i35;
import 'package:sub_track/core/services/brand_service.dart' as _i24;
import 'package:sub_track/core/services/calculation_service.dart' as _i36;
import 'package:sub_track/core/services/connectivity_service.dart' as _i23;
import 'package:sub_track/core/services/file_service.dart' as _i21;
import 'package:sub_track/core/services/firebase/subscription_service.dart'
    as _i25;
import 'package:sub_track/core/services/notification_service.dart' as _i19;
import 'package:sub_track/core/services/url_launch_service.dart' as _i26;
import 'package:sub_track/ui/services/ui_services.dart' as _i37;
import 'package:sub_track/ui/view/on_boarding/on_boarding_viewmodel.dart'
    as _i38;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeFirebaseAuth extends _i1.Fake implements _i2.FirebaseAuth {}

class _FakeFirebaseAuthenticationResult extends _i1.Fake
    implements _i3.FirebaseAuthenticationResult {}

class _FakeBox<E> extends _i1.Fake implements _i4.Box<E> {}

class _FakeLazyBox<E> extends _i1.Fake implements _i4.LazyBox<E> {}

class _FakeScrollController extends _i1.Fake implements _i5.ScrollController {}

class _FakeAnimatorKey<T> extends _i1.Fake implements _i6.AnimatorKey<T> {}

class _FakeNavigationService extends _i1.Fake implements _i7.NavigationService {
}

class _FakeStreamData<T> extends _i1.Fake implements _i8.StreamData<T> {}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i7.NavigationService {
  @override
  String get previousRoute =>
      (super.noSuchMethod(Invocation.getter(#previousRoute), returnValue: '')
          as String);
  @override
  String get currentRoute =>
      (super.noSuchMethod(Invocation.getter(#currentRoute), returnValue: '')
          as String);
  @override
  _i9.GlobalKey<_i10.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(#nestedNavigationKey, [index]))
          as _i9.GlobalKey<_i10.NavigatorState>?);
  @override
  void config(
          {bool? enableLog,
          bool? defaultPopGesture,
          bool? defaultOpaqueRoute,
          Duration? defaultDurationTransition,
          bool? defaultGlobalState,
          String? defaultTransition}) =>
      super.noSuchMethod(
          Invocation.method(#config, [], {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransition: defaultTransition
          }),
          returnValueForMissingStub: null);
  @override
  _i11.Future<dynamic>? navigateWithTransition(_i9.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id}) =>
      (super.noSuchMethod(Invocation.method(#navigateWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id
      })) as _i11.Future<dynamic>?);
  @override
  _i11.Future<dynamic>? replaceWithTransition(_i9.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id}) =>
      (super.noSuchMethod(Invocation.method(#replaceWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id
      })) as _i11.Future<dynamic>?);
  @override
  bool back({dynamic result, int? id}) => (super.noSuchMethod(
      Invocation.method(#back, [], {#result: result, #id: id}),
      returnValue: false) as bool);
  @override
  void popUntil(_i10.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void popRepeated(int? popTimes) =>
      super.noSuchMethod(Invocation.method(#popRepeated, [popTimes]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<dynamic>? navigateTo(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#navigateTo, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i11.Future<dynamic>?);
  @override
  _i11.Future<dynamic>? navigateToView(_i9.Widget? view,
          {dynamic arguments, int? id, bool? preventDuplicates = true}) =>
      (super.noSuchMethod(Invocation.method(#navigateToView, [
        view
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates
      })) as _i11.Future<dynamic>?);
  @override
  _i11.Future<dynamic>? replaceWith(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i11.Future<dynamic>?);
  @override
  _i11.Future<dynamic>? clearStackAndShow(String? routeName,
          {dynamic arguments, int? id, Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearStackAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #parameters: parameters
      })) as _i11.Future<dynamic>?);
  @override
  _i11.Future<dynamic>? clearTillFirstAndShow(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i11.Future<dynamic>?);
  @override
  _i11.Future<dynamic>? clearTillFirstAndShowView(_i9.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShowView, [view],
          {#arguments: arguments, #id: id})) as _i11.Future<dynamic>?);
  @override
  _i11.Future<dynamic>? pushNamedAndRemoveUntil(String? routeName,
          {_i10.RoutePredicate? predicate, dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#pushNamedAndRemoveUntil, [
        routeName
      ], {
        #predicate: predicate,
        #arguments: arguments,
        #id: id
      })) as _i11.Future<dynamic>?);
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i12.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i12.DialogBuilder>? builders) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilders, [builders]),
          returnValueForMissingStub: null);
  @override
  void registerCustomDialogBuilder(
          {dynamic variant,
          _i9.Widget Function(_i9.BuildContext, _i13.DialogRequest,
                  dynamic Function(_i14.DialogResponse))?
              builder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilder, [],
              {#variant: variant, #builder: builder}),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i14.DialogResponse?> showDialog(
          {String? title,
          String? description,
          String? cancelTitle,
          _i15.Color? cancelTitleColor,
          String? buttonTitle = r'Ok',
          _i15.Color? buttonTitleColor,
          bool? barrierDismissible = false,
          _i12.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #cancelTitleColor: cancelTitleColor,
                #buttonTitle: buttonTitle,
                #buttonTitleColor: buttonTitleColor,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i14.DialogResponse?>.value())
          as _i11.Future<_i14.DialogResponse?>);
  @override
  _i11.Future<_i14.DialogResponse?> showCustomDialog(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i15.Color? barrierColor = const _i15.Color(2315255808),
          bool? barrierDismissible = false,
          String? barrierLabel = r'',
          dynamic customData}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomDialog, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #barrierLabel: barrierLabel,
                #customData: customData
              }),
              returnValue: Future<_i14.DialogResponse?>.value())
          as _i11.Future<_i14.DialogResponse?>);
  @override
  _i11.Future<_i14.DialogResponse?> showConfirmationDialog(
          {String? title,
          String? description,
          String? cancelTitle = r'Cancel',
          String? confirmationTitle = r'Ok',
          bool? barrierDismissible = false,
          _i12.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showConfirmationDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #confirmationTitle: confirmationTitle,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i14.DialogResponse?>.value())
          as _i11.Future<_i14.DialogResponse?>);
  @override
  void completeDialog(_i14.DialogResponse? response) =>
      super.noSuchMethod(Invocation.method(#completeDialog, [response]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackbarService extends _i1.Mock implements _i16.SnackbarService {
  @override
  void registerSnackbarConfig(_i17.SnackbarConfig? config) =>
      super.noSuchMethod(Invocation.method(#registerSnackbarConfig, [config]),
          returnValueForMissingStub: null);
  @override
  void registerCustomSnackbarconfig(
          {dynamic customData, _i17.SnackbarConfig? config}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomSnackbarconfig, [],
              {#customData: customData, #config: config}),
          returnValueForMissingStub: null);
  @override
  void registerCustomMainButtonBuilder(
          {dynamic variant,
          _i9.Widget Function(String?, Function?)? builder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomMainButtonBuilder, [],
              {#variant: variant, #builder: builder}),
          returnValueForMissingStub: null);
  @override
  void registerCustomSnackbarConfig(
          {dynamic variant,
          _i17.SnackbarConfig? config,
          _i17.SnackbarConfig Function()? configBuilder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomSnackbarConfig, [], {
            #variant: variant,
            #config: config,
            #configBuilder: configBuilder
          }),
          returnValueForMissingStub: null);
  @override
  void showSnackbar(
          {String? title = r'',
          String? message,
          dynamic Function(dynamic)? onTap,
          Duration? duration = const Duration(seconds: 3),
          String? mainButtonTitle,
          void Function()? onMainButtonTapped}) =>
      super.noSuchMethod(
          Invocation.method(#showSnackbar, [], {
            #title: title,
            #message: message,
            #onTap: onTap,
            #duration: duration,
            #mainButtonTitle: mainButtonTitle,
            #onMainButtonTapped: onMainButtonTapped
          }),
          returnValueForMissingStub: null);
  @override
  _i11.Future<dynamic>? showCustomSnackBar(
          {String? message,
          dynamic customData,
          dynamic variant,
          String? title,
          String? mainButtonTitle,
          void Function()? onMainButtonTapped,
          Function? onTap,
          Duration? duration = const Duration(seconds: 1)}) =>
      (super.noSuchMethod(Invocation.method(#showCustomSnackBar, [], {
        #message: message,
        #customData: customData,
        #variant: variant,
        #title: title,
        #mainButtonTitle: mainButtonTitle,
        #onMainButtonTapped: onMainButtonTapped,
        #onTap: onTap,
        #duration: duration
      })) as _i11.Future<dynamic>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i18.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i18.SheetBuilder>? builders) =>
      super.noSuchMethod(Invocation.method(#setCustomSheetBuilders, [builders]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i14.SheetResponse?> showBottomSheet(
          {String? title,
          String? description,
          String? confirmButtonTitle = r'Ok',
          String? cancelButtonTitle,
          bool? enableDrag = true,
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration}) =>
      (super.noSuchMethod(
              Invocation.method(#showBottomSheet, [], {
                #title: title,
                #description: description,
                #confirmButtonTitle: confirmButtonTitle,
                #cancelButtonTitle: cancelButtonTitle,
                #enableDrag: enableDrag,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration
              }),
              returnValue: Future<_i14.SheetResponse?>.value())
          as _i11.Future<_i14.SheetResponse?>);
  @override
  _i11.Future<_i14.SheetResponse?> showCustomSheet(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i15.Color? barrierColor = const _i15.Color(2315255808),
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          String? barrierLabel = r'',
          dynamic customData,
          bool? enableDrag = true,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomSheet, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #barrierLabel: barrierLabel,
                #customData: customData,
                #enableDrag: enableDrag,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration
              }),
              returnValue: Future<_i14.SheetResponse?>.value())
          as _i11.Future<_i14.SheetResponse?>);
  @override
  void completeSheet(_i14.SheetResponse? response) =>
      super.noSuchMethod(Invocation.method(#completeSheet, [response]),
          returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseAuthenticationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthenticationService extends _i1.Mock
    implements _i3.FirebaseAuthenticationService {
  @override
  _i2.FirebaseAuth get firebaseAuth =>
      (super.noSuchMethod(Invocation.getter(#firebaseAuth),
          returnValue: _FakeFirebaseAuth()) as _i2.FirebaseAuth);
  @override
  bool get hasUser =>
      (super.noSuchMethod(Invocation.getter(#hasUser), returnValue: false)
          as bool);
  @override
  _i11.Future<bool> emailExists(String? email) =>
      (super.noSuchMethod(Invocation.method(#emailExists, [email]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<_i3.FirebaseAuthenticationResult> signInWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signInWithGoogle, []),
              returnValue: Future<_i3.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i11.Future<_i3.FirebaseAuthenticationResult>);
  @override
  _i11.Future<bool> isAppleSignInAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAppleSignInAvailable, []),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<_i3.FirebaseAuthenticationResult> signInWithApple(
          {String? appleRedirectUri, String? appleClientId}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithApple, [], {
                #appleRedirectUri: appleRedirectUri,
                #appleClientId: appleClientId
              }),
              returnValue: Future<_i3.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i11.Future<_i3.FirebaseAuthenticationResult>);
  @override
  _i11.Future<_i3.FirebaseAuthenticationResult> loginAnonymously() =>
      (super.noSuchMethod(Invocation.method(#loginAnonymously, []),
              returnValue: Future<_i3.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i11.Future<_i3.FirebaseAuthenticationResult>);
  @override
  _i11.Future<_i3.FirebaseAuthenticationResult> loginWithEmail(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #loginWithEmail, [], {#email: email, #password: password}),
              returnValue: Future<_i3.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i11.Future<_i3.FirebaseAuthenticationResult>);
  @override
  _i11.Future<_i3.FirebaseAuthenticationResult> createAccountWithEmail(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#createAccountWithEmail, [],
                  {#email: email, #password: password}),
              returnValue: Future<_i3.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i11.Future<_i3.FirebaseAuthenticationResult>);
  @override
  _i11.Future<dynamic> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<dynamic>.value()) as _i11.Future<dynamic>);
  @override
  _i11.Future<dynamic> sendResetPasswordLink(String? email) =>
      (super.noSuchMethod(Invocation.method(#sendResetPasswordLink, [email]),
          returnValue: Future<dynamic>.value()) as _i11.Future<dynamic>);
  @override
  _i11.Future<dynamic> validatePassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#validatePassword, [password]),
          returnValue: Future<dynamic>.value()) as _i11.Future<dynamic>);
  @override
  _i11.Future<dynamic> updatePassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [password]),
          returnValue: Future<dynamic>.value()) as _i11.Future<dynamic>);
  @override
  String generateNonce([int? length = 32]) =>
      (super.noSuchMethod(Invocation.method(#generateNonce, [length]),
          returnValue: '') as String);
  @override
  String sha256ofString(String? input) =>
      (super.noSuchMethod(Invocation.method(#sha256ofString, [input]),
          returnValue: '') as String);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i19.NotificationService {
  @override
  _i11.Future<void> scheduleNotification(_i20.Subscription? subscription) =>
      (super.noSuchMethod(
          Invocation.method(#scheduleNotification, [subscription]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> deleteNotification(_i20.Subscription? subscription) =>
      (super.noSuchMethod(
          Invocation.method(#deleteNotification, [subscription]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i21.FileService {
  @override
  _i11.Future<String> getApplicationDocumentsDirectoryPath() =>
      (super.noSuchMethod(
          Invocation.method(#getApplicationDocumentsDirectoryPath, []),
          returnValue: Future<String>.value('')) as _i11.Future<String>);
  @override
  _i11.Future<_i22.File?> getImage({bool? fromGallery = true}) =>
      (super.noSuchMethod(
          Invocation.method(#getImage, [], {#fromGallery: fromGallery}),
          returnValue: Future<_i22.File?>.value()) as _i11.Future<_i22.File?>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i23.ConnectivityService {
  @override
  _i11.Stream<bool> get connectivityStream =>
      (super.noSuchMethod(Invocation.getter(#connectivityStream),
          returnValue: Stream<bool>.empty()) as _i11.Stream<bool>);
  @override
  bool get serviceStopped => (super
          .noSuchMethod(Invocation.getter(#serviceStopped), returnValue: false)
      as bool);
  @override
  void start() => super.noSuchMethod(Invocation.method(#start, []),
      returnValueForMissingStub: null);
  @override
  void stop() => super.noSuchMethod(Invocation.method(#stop, []),
      returnValueForMissingStub: null);
  @override
  _i11.Future<bool> checkConnectivity() =>
      (super.noSuchMethod(Invocation.method(#checkConnectivity, []),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
}

/// A class which mocks [BrandService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBrandService extends _i1.Mock implements _i24.BrandService {}

/// A class which mocks [SubscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionService extends _i1.Mock
    implements _i25.SubscriptionService {
  @override
  _i11.Stream<List<_i20.Subscription>> fetchSubscriptions() =>
      (super.noSuchMethod(Invocation.method(#fetchSubscriptions, []),
              returnValue: Stream<List<_i20.Subscription>>.empty())
          as _i11.Stream<List<_i20.Subscription>>);
  @override
  dynamic addSubscription(_i20.Subscription? subscription) =>
      super.noSuchMethod(Invocation.method(#addSubscription, [subscription]));
  @override
  dynamic updateSubscription(_i20.Subscription? updatedSubscription) =>
      super.noSuchMethod(
          Invocation.method(#updateSubscription, [updatedSubscription]));
  @override
  dynamic deleteSubscription(String? subscriptionId) => super
      .noSuchMethod(Invocation.method(#deleteSubscription, [subscriptionId]));
}

/// A class which mocks [UrlLaunchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLaunchService extends _i1.Mock implements _i26.UrlLaunchService {
  @override
  _i11.Future<dynamic> makePhoneCall(String? phoneNumber) =>
      (super.noSuchMethod(Invocation.method(#makePhoneCall, [phoneNumber]),
          returnValue: Future<dynamic>.value()) as _i11.Future<dynamic>);
  @override
  _i11.Future<dynamic> sendSms(String? phoneNumber) =>
      (super.noSuchMethod(Invocation.method(#sendSms, [phoneNumber]),
          returnValue: Future<dynamic>.value()) as _i11.Future<dynamic>);
  @override
  _i11.Future<dynamic> launchUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#launchUrl, [url]),
          returnValue: Future<dynamic>.value()) as _i11.Future<dynamic>);
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i4.HiveInterface {
  @override
  void init(String? path) =>
      super.noSuchMethod(Invocation.method(#init, [path]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i4.Box<E>> openBox<E>(String? name,
          {_i4.HiveCipher? encryptionCipher,
          _i4.KeyComparator? keyComparator = _i27.defaultKeyComparator,
          _i4.CompactionStrategy? compactionStrategy =
              _i28.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          _i29.Uint8List? bytes,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #bytes: bytes,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i4.Box<E>>.value(_FakeBox<E>()))
          as _i11.Future<_i4.Box<E>>);
  @override
  _i11.Future<_i4.LazyBox<E>> openLazyBox<E>(String? name,
          {_i4.HiveCipher? encryptionCipher,
          _i4.KeyComparator? keyComparator = _i27.defaultKeyComparator,
          _i4.CompactionStrategy? compactionStrategy =
              _i28.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openLazyBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i4.LazyBox<E>>.value(_FakeLazyBox<E>()))
          as _i11.Future<_i4.LazyBox<E>>);
  @override
  _i4.Box<E> box<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#box, [name]),
          returnValue: _FakeBox<E>()) as _i4.Box<E>);
  @override
  _i4.LazyBox<E> lazyBox<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#lazyBox, [name]),
          returnValue: _FakeLazyBox<E>()) as _i4.LazyBox<E>);
  @override
  bool isBoxOpen(String? name) =>
      (super.noSuchMethod(Invocation.method(#isBoxOpen, [name]),
          returnValue: false) as bool);
  @override
  _i11.Future<void> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> deleteBoxFromDisk(String? name) =>
      (super.noSuchMethod(Invocation.method(#deleteBoxFromDisk, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(Invocation.method(#deleteFromDisk, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  List<int> generateSecureKey() =>
      (super.noSuchMethod(Invocation.method(#generateSecureKey, []),
          returnValue: <int>[]) as List<int>);
  @override
  _i11.Future<bool> boxExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#boxExists, [name]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
}

/// A class which mocks [BrandLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBrandLocalDataSource extends _i1.Mock
    implements _i30.BrandLocalDataSource {
  @override
  _i11.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i11.Future<void>);
}

/// A class which mocks [BrandRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBrandRemoteDataSource extends _i1.Mock
    implements _i31.BrandRemoteDataSource {}

/// A class which mocks [SubscriptionLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionLocalDataSource extends _i1.Mock
    implements _i32.SubscriptionLocalDataSource {
  @override
  _i11.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> cleanEverything() =>
      (super.noSuchMethod(Invocation.method(#cleanEverything, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  List<_i20.Subscription> getSubscriptionsOnce() =>
      (super.noSuchMethod(Invocation.method(#getSubscriptionsOnce, []),
          returnValue: <_i20.Subscription>[]) as List<_i20.Subscription>);
}

/// A class which mocks [SubscriptionRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionRemoteDataSource extends _i1.Mock
    implements _i33.SubscriptionRemoteDataSource {}

/// A class which mocks [BrandRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockBrandRepo extends _i1.Mock implements _i34.BrandRepo {
  @override
  _i11.Future<dynamic> fetchBrands({bool? forceFetch = false}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchBrands, [], {#forceFetch: forceFetch}),
          returnValue: Future<dynamic>.value()) as _i11.Future<dynamic>);
}

/// A class which mocks [SubscriptionRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionRepo extends _i1.Mock implements _i35.SubscriptionRepo {
  @override
  _i11.Future<_i11.Stream<List<_i20.Subscription>>> fetchSubscriptions(
          {bool? forceFetch = false}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchSubscriptions, [], {#forceFetch: forceFetch}),
          returnValue: Future<_i11.Stream<List<_i20.Subscription>>>.value(
              Stream<List<_i20.Subscription>>.empty())) as _i11
          .Future<_i11.Stream<List<_i20.Subscription>>>);
  @override
  _i11.Future<void> addSubscription({_i20.Subscription? subscription}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addSubscription, [], {#subscription: subscription}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> deleteSubscription({String? subscriptionId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #deleteSubscription, [], {#subscriptionId: subscriptionId}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> updateSubscription({_i20.Subscription? subscription}) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateSubscription, [], {#subscription: subscription}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  List<_i20.Subscription> getSubscriptionsOnce() =>
      (super.noSuchMethod(Invocation.method(#getSubscriptionsOnce, []),
          returnValue: <_i20.Subscription>[]) as List<_i20.Subscription>);
  @override
  _i11.Future<void> cacheSubscriptions() =>
      (super.noSuchMethod(Invocation.method(#cacheSubscriptions, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
}

/// A class which mocks [CalculationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculationService extends _i1.Mock
    implements _i36.CalculationService {
  @override
  _i11.Future<double> getTotalExpense(
          {bool? currentYear = true, bool? fromRemote = false}) =>
      (super.noSuchMethod(
          Invocation.method(#getTotalExpense, [],
              {#currentYear: currentYear, #fromRemote: fromRemote}),
          returnValue: Future<double>.value(0.0)) as _i11.Future<double>);
  @override
  _i11.Future<double> getCurrentMonthExpense({bool? fromRemote = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getCurrentMonthExpense, [], {#fromRemote: fromRemote}),
          returnValue: Future<double>.value(0.0)) as _i11.Future<double>);
  @override
  _i11.Future<Map<DateTime, double>> getGraphData({bool? fromRemote = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getGraphData, [], {#fromRemote: fromRemote}),
              returnValue:
                  Future<Map<DateTime, double>>.value(<DateTime, double>{}))
          as _i11.Future<Map<DateTime, double>>);
  @override
  _i11.Future<double> getExpenseOf(
          {DateTime? month, bool? fromRemote = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getExpenseOf, [], {#month: month, #fromRemote: fromRemote}),
          returnValue: Future<double>.value(0.0)) as _i11.Future<double>);
  @override
  _i11.Future<int?> calculateRemainingDays(_i20.Subscription? subscription) =>
      (super.noSuchMethod(
          Invocation.method(#calculateRemainingDays, [subscription]),
          returnValue: Future<int?>.value()) as _i11.Future<int?>);
}

/// A class which mocks [UIServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockUIServices extends _i1.Mock implements _i37.UIServices {
  @override
  set scrollController(dynamic value) =>
      super.noSuchMethod(Invocation.setter(#scrollController, value),
          returnValueForMissingStub: null);
  @override
  _i5.ScrollController get scrollController =>
      (super.noSuchMethod(Invocation.getter(#scrollController),
          returnValue: _FakeScrollController()) as _i5.ScrollController);
  @override
  _i6.AnimatorKey<dynamic> get animatorKey => (super.noSuchMethod(
      Invocation.getter(#animatorKey),
      returnValue: _FakeAnimatorKey<dynamic>()) as _i6.AnimatorKey<dynamic>);
}

/// A class which mocks [OnBoardingViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockOnBoardingViewModel extends _i1.Mock
    implements _i38.OnBoardingViewModel {
  @override
  _i7.NavigationService get $navigationService =>
      (super.noSuchMethod(Invocation.getter(#$navigationService),
          returnValue: _FakeNavigationService()) as _i7.NavigationService);
  @override
  bool get initialised =>
      (super.noSuchMethod(Invocation.getter(#initialised), returnValue: false)
          as bool);
  @override
  bool get onModelReadyCalled =>
      (super.noSuchMethod(Invocation.getter(#onModelReadyCalled),
          returnValue: false) as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get isBusy =>
      (super.noSuchMethod(Invocation.getter(#isBusy), returnValue: false)
          as bool);
  @override
  bool get hasError =>
      (super.noSuchMethod(Invocation.getter(#hasError), returnValue: false)
          as bool);
  @override
  bool get anyObjectsBusy => (super
          .noSuchMethod(Invocation.getter(#anyObjectsBusy), returnValue: false)
      as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  dynamic navigate(int? index) =>
      super.noSuchMethod(Invocation.method(#navigate, [index]));
  @override
  bool busy(Object? object) => (super
          .noSuchMethod(Invocation.method(#busy, [object]), returnValue: false)
      as bool);
  @override
  dynamic error(Object? object) =>
      super.noSuchMethod(Invocation.method(#error, [object]));
  @override
  void setBusy(bool? value) =>
      super.noSuchMethod(Invocation.method(#setBusy, [value]),
          returnValueForMissingStub: null);
  @override
  void setError(dynamic error) =>
      super.noSuchMethod(Invocation.method(#setError, [error]),
          returnValueForMissingStub: null);
  @override
  bool hasErrorForKey(Object? key) =>
      (super.noSuchMethod(Invocation.method(#hasErrorForKey, [key]),
          returnValue: false) as bool);
  @override
  void clearErrors() => super.noSuchMethod(Invocation.method(#clearErrors, []),
      returnValueForMissingStub: null);
  @override
  void setBusyForObject(Object? object, bool? value) =>
      super.noSuchMethod(Invocation.method(#setBusyForObject, [object, value]),
          returnValueForMissingStub: null);
  @override
  void setErrorForObject(Object? object, dynamic value) =>
      super.noSuchMethod(Invocation.method(#setErrorForObject, [object, value]),
          returnValueForMissingStub: null);
  @override
  void onFutureError(dynamic error, Object? key) =>
      super.noSuchMethod(Invocation.method(#onFutureError, [error, key]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<T> runBusyFuture<T>(_i11.Future<T>? busyFuture,
          {Object? busyObject, bool? throwException = false}) =>
      (super.noSuchMethod(
          Invocation.method(#runBusyFuture, [busyFuture],
              {#busyObject: busyObject, #throwException: throwException}),
          returnValue: Future<T>.value(null)) as _i11.Future<T>);
  @override
  _i11.Future<T> runErrorFuture<T>(_i11.Future<T>? future,
          {Object? key, bool? throwException = false}) =>
      (super.noSuchMethod(
          Invocation.method(#runErrorFuture, [future],
              {#key: key, #throwException: throwException}),
          returnValue: Future<T>.value(null)) as _i11.Future<T>);
  @override
  void setInitialised(bool? value) =>
      super.noSuchMethod(Invocation.method(#setInitialised, [value]),
          returnValueForMissingStub: null);
  @override
  void setOnModelReadyCalled(bool? value) =>
      super.noSuchMethod(Invocation.method(#setOnModelReadyCalled, [value]),
          returnValueForMissingStub: null);
  @override
  _i8.StreamData<dynamic> setupStream<T>(_i11.Stream<T>? stream,
          {dynamic onData,
          dynamic onSubscribed,
          dynamic onError,
          dynamic onCancel,
          dynamic transformData}) =>
      (super.noSuchMethod(
          Invocation.method(#setupStream, [
            stream
          ], {
            #onData: onData,
            #onSubscribed: onSubscribed,
            #onError: onError,
            #onCancel: onCancel,
            #transformData: transformData
          }),
          returnValue: _FakeStreamData<dynamic>()) as _i8.StreamData<dynamic>);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i15.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i15.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}
