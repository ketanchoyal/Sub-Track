// Mocks generated by Mockito 5.0.8 from annotations
// in sub_track/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;
import 'dart:io' as _i29;
import 'dart:typed_data' as _i16;
import 'dart:ui' as _i22;

import 'package:animator/src/animator.dart' as _i9;
import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:cloud_firestore_platform_interface/src/get_options.dart'
    as _i13;
import 'package:cloud_firestore_platform_interface/src/persistence_settings.dart'
    as _i15;
import 'package:cloud_firestore_platform_interface/src/set_options.dart'
    as _i14;
import 'package:cloud_firestore_platform_interface/src/settings.dart' as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i17;
import 'package:flutter/src/widgets/navigator.dart' as _i18;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i8;
import 'package:hive/hive.dart' as _i7;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i35;
import 'package:hive/src/box/default_key_comparator.dart' as _i34;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked/src/state_management/base_view_models.dart' as _i11;
import 'package:stacked_firebase_auth/src/firebase_authentication_service.dart'
    as _i6;
import 'package:stacked_services/src/bottom_sheet/bottom_sheet_service.dart'
    as _i25;
import 'package:stacked_services/src/dialog/dialog_service.dart' as _i19;
import 'package:stacked_services/src/models/overlay_request.dart' as _i20;
import 'package:stacked_services/src/models/overlay_response.dart' as _i21;
import 'package:stacked_services/src/navigation_service.dart' as _i10;
import 'package:stacked_services/src/snackbar/snackbar_config.dart' as _i24;
import 'package:stacked_services/src/snackbar/snackbar_service.dart' as _i23;
import 'package:sub_track/core/data_source/brand/brand_local.dart' as _i36;
import 'package:sub_track/core/data_source/brand/brand_remote.dart' as _i37;
import 'package:sub_track/core/data_source/subscription/sub_local.dart' as _i38;
import 'package:sub_track/core/data_source/subscription/sub_remote.dart'
    as _i39;
import 'package:sub_track/core/models/subscription/subscription.dart' as _i27;
import 'package:sub_track/core/repository/brand/brand_repo.dart' as _i40;
import 'package:sub_track/core/repository/subscription/subscription_repo.dart'
    as _i41;
import 'package:sub_track/core/services/brand_service.dart' as _i31;
import 'package:sub_track/core/services/calculation_service.dart' as _i42;
import 'package:sub_track/core/services/connectivity_service.dart' as _i30;
import 'package:sub_track/core/services/file_service.dart' as _i28;
import 'package:sub_track/core/services/firebase/subscription_service.dart'
    as _i32;
import 'package:sub_track/core/services/notification_service.dart' as _i26;
import 'package:sub_track/core/services/url_launch_service.dart' as _i33;
import 'package:sub_track/ui/services/ui_services.dart' as _i43;
import 'package:sub_track/ui/view/on_boarding/on_boarding_viewmodel.dart'
    as _i44;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDocumentReference<T extends Object?> extends _i1.Fake
    implements _i2.DocumentReference<T> {}

class _FakeCollectionReference<T extends Object?> extends _i1.Fake
    implements _i2.CollectionReference<T> {}

class _FakeFirebaseFirestore extends _i1.Fake implements _i2.FirebaseFirestore {
}

class _FakeDocumentSnapshot<T extends Object?> extends _i1.Fake
    implements _i2.DocumentSnapshot<T> {}

class _FakeFirebaseApp extends _i1.Fake implements _i3.FirebaseApp {}

class _FakeSettings extends _i1.Fake implements _i4.Settings {}

class _FakeWriteBatch extends _i1.Fake implements _i2.WriteBatch {}

class _FakeLoadBundleTask extends _i1.Fake implements _i2.LoadBundleTask {}

class _FakeQuerySnapshot<T extends Object?> extends _i1.Fake
    implements _i2.QuerySnapshot<T> {}

class _FakeQuery<T extends Object?> extends _i1.Fake implements _i2.Query<T> {}

class _FakeFirebaseAuth extends _i1.Fake implements _i5.FirebaseAuth {}

class _FakeFirebaseAuthenticationResult extends _i1.Fake
    implements _i6.FirebaseAuthenticationResult {}

class _FakeBox<E> extends _i1.Fake implements _i7.Box<E> {}

class _FakeLazyBox<E> extends _i1.Fake implements _i7.LazyBox<E> {}

class _FakeScrollController extends _i1.Fake implements _i8.ScrollController {}

class _FakeAnimatorKey<T> extends _i1.Fake implements _i9.AnimatorKey<T> {}

class _FakeNavigationService extends _i1.Fake
    implements _i10.NavigationService {}

class _FakeStreamData<T> extends _i1.Fake implements _i11.StreamData<T> {}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i2.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i12.Future<_i2.DocumentReference<T>> add(T? data) =>
      (super.noSuchMethod(Invocation.method(#add, [data]),
              returnValue: Future<_i2.DocumentReference<T>>.value(
                  _FakeDocumentReference<T>()))
          as _i12.Future<_i2.DocumentReference<T>>);
  @override
  _i2.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
      Invocation.method(#doc, [path]),
      returnValue: _FakeDocumentReference<T>()) as _i2.DocumentReference<T>);
  @override
  _i2.CollectionReference<R> withConverter<R extends Object?>(
          {_i2.FromFirestore<R>? fromFirestore,
          _i2.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeCollectionReference<R>())
          as _i2.CollectionReference<R>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i2.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore()) as _i2.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i2.CollectionReference<T> get parent =>
      (super.noSuchMethod(Invocation.getter(#parent),
              returnValue: _FakeCollectionReference<T>())
          as _i2.CollectionReference<T>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i2.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i12.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> update(Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#update, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<_i2.DocumentSnapshot<T>> get([_i13.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: Future<_i2.DocumentSnapshot<T>>.value(
                  _FakeDocumentSnapshot<T>()))
          as _i12.Future<_i2.DocumentSnapshot<T>>);
  @override
  _i12.Stream<_i2.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i2.DocumentSnapshot<T>>.empty())
          as _i12.Stream<_i2.DocumentSnapshot<T>>);
  @override
  _i12.Future<void> set(T? data, [_i14.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i2.DocumentReference<R> withConverter<R>(
          {_i2.FromFirestore<R>? fromFirestore,
          _i2.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference<R>())
          as _i2.DocumentReference<R>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i2.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp()) as _i3.FirebaseApp);
  @override
  set app(_i3.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set settings(_i4.Settings? settings) =>
      super.noSuchMethod(Invocation.setter(#settings, settings),
          returnValueForMissingStub: null);
  @override
  _i4.Settings get settings => (super.noSuchMethod(Invocation.getter(#settings),
      returnValue: _FakeSettings()) as _i4.Settings);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i2.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i2.WriteBatch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeWriteBatch()) as _i2.WriteBatch);
  @override
  _i12.Future<void> clearPersistence() =>
      (super.noSuchMethod(Invocation.method(#clearPersistence, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> enablePersistence(
          [_i15.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#enablePersistence, [persistenceSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i2.LoadBundleTask loadBundle(_i16.Uint8List? bundle) =>
      (super.noSuchMethod(Invocation.method(#loadBundle, [bundle]),
          returnValue: _FakeLoadBundleTask()) as _i2.LoadBundleTask);
  @override
  _i12.Future<_i2.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
          String? name,
          {_i13.GetOptions? options = const _i13.GetOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#namedQueryGet, [name], {#options: options}),
          returnValue: Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot<Map<String, dynamic>>())) as _i12
          .Future<_i2.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i2.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collectionGroup, [collectionPath]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i12.Future<void> disableNetwork() =>
      (super.noSuchMethod(Invocation.method(#disableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i2.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(Invocation.method(#doc, [documentPath]),
              returnValue: _FakeDocumentReference<Map<String, dynamic>>())
          as _i2.DocumentReference<Map<String, dynamic>>);
  @override
  _i12.Future<void> enableNetwork() =>
      (super.noSuchMethod(Invocation.method(#enableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(Invocation.method(#snapshotsInSync, []),
          returnValue: Stream<void>.empty()) as _i12.Stream<void>);
  @override
  _i12.Future<T> runTransaction<T>(
          _i2.TransactionHandler<T>? transactionHandler,
          {Duration? timeout = const Duration(seconds: 30)}) =>
      (super.noSuchMethod(
          Invocation.method(
              #runTransaction, [transactionHandler], {#timeout: timeout}),
          returnValue: Future<T>.value(null)) as _i12.Future<T>);
  @override
  _i12.Future<void> terminate() =>
      (super.noSuchMethod(Invocation.method(#terminate, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> waitForPendingWrites() =>
      (super.noSuchMethod(Invocation.method(#waitForPendingWrites, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i10.NavigationService {
  @override
  String get previousRoute =>
      (super.noSuchMethod(Invocation.getter(#previousRoute), returnValue: '')
          as String);
  @override
  String get currentRoute =>
      (super.noSuchMethod(Invocation.getter(#currentRoute), returnValue: '')
          as String);
  @override
  _i17.GlobalKey<_i18.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(#nestedNavigationKey, [index]))
          as _i17.GlobalKey<_i18.NavigatorState>?);
  @override
  void config(
          {bool? enableLog,
          bool? defaultPopGesture,
          bool? defaultOpaqueRoute,
          Duration? defaultDurationTransition,
          bool? defaultGlobalState,
          String? defaultTransition}) =>
      super.noSuchMethod(
          Invocation.method(#config, [], {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransition: defaultTransition
          }),
          returnValueForMissingStub: null);
  @override
  _i12.Future<dynamic>? navigateWithTransition(_i17.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id}) =>
      (super.noSuchMethod(Invocation.method(#navigateWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id
      })) as _i12.Future<dynamic>?);
  @override
  _i12.Future<dynamic>? replaceWithTransition(_i17.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id}) =>
      (super.noSuchMethod(Invocation.method(#replaceWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id
      })) as _i12.Future<dynamic>?);
  @override
  bool back({dynamic result, int? id}) => (super.noSuchMethod(
      Invocation.method(#back, [], {#result: result, #id: id}),
      returnValue: false) as bool);
  @override
  void popUntil(_i18.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void popRepeated(int? popTimes) =>
      super.noSuchMethod(Invocation.method(#popRepeated, [popTimes]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<dynamic>? navigateTo(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#navigateTo, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i12.Future<dynamic>?);
  @override
  _i12.Future<dynamic>? navigateToView(_i17.Widget? view,
          {dynamic arguments, int? id, bool? preventDuplicates = true}) =>
      (super.noSuchMethod(Invocation.method(#navigateToView, [
        view
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates
      })) as _i12.Future<dynamic>?);
  @override
  _i12.Future<dynamic>? replaceWith(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i12.Future<dynamic>?);
  @override
  _i12.Future<dynamic>? clearStackAndShow(String? routeName,
          {dynamic arguments, int? id, Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearStackAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #parameters: parameters
      })) as _i12.Future<dynamic>?);
  @override
  _i12.Future<dynamic>? clearTillFirstAndShow(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i12.Future<dynamic>?);
  @override
  _i12.Future<dynamic>? clearTillFirstAndShowView(_i17.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShowView, [view],
          {#arguments: arguments, #id: id})) as _i12.Future<dynamic>?);
  @override
  _i12.Future<dynamic>? pushNamedAndRemoveUntil(String? routeName,
          {_i18.RoutePredicate? predicate, dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#pushNamedAndRemoveUntil, [
        routeName
      ], {
        #predicate: predicate,
        #arguments: arguments,
        #id: id
      })) as _i12.Future<dynamic>?);
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i19.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i19.DialogBuilder>? builders) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilders, [builders]),
          returnValueForMissingStub: null);
  @override
  void registerCustomDialogBuilder(
          {dynamic variant,
          _i17.Widget Function(_i17.BuildContext, _i20.DialogRequest,
                  dynamic Function(_i21.DialogResponse))?
              builder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilder, [],
              {#variant: variant, #builder: builder}),
          returnValueForMissingStub: null);
  @override
  _i12.Future<_i21.DialogResponse?> showDialog(
          {String? title,
          String? description,
          String? cancelTitle,
          _i22.Color? cancelTitleColor,
          String? buttonTitle = r'Ok',
          _i22.Color? buttonTitleColor,
          bool? barrierDismissible = false,
          _i19.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #cancelTitleColor: cancelTitleColor,
                #buttonTitle: buttonTitle,
                #buttonTitleColor: buttonTitleColor,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i21.DialogResponse?>.value())
          as _i12.Future<_i21.DialogResponse?>);
  @override
  _i12.Future<_i21.DialogResponse?> showCustomDialog(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i22.Color? barrierColor = const _i22.Color(2315255808),
          bool? barrierDismissible = false,
          String? barrierLabel = r'',
          dynamic customData}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomDialog, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #barrierLabel: barrierLabel,
                #customData: customData
              }),
              returnValue: Future<_i21.DialogResponse?>.value())
          as _i12.Future<_i21.DialogResponse?>);
  @override
  _i12.Future<_i21.DialogResponse?> showConfirmationDialog(
          {String? title,
          String? description,
          String? cancelTitle = r'Cancel',
          String? confirmationTitle = r'Ok',
          bool? barrierDismissible = false,
          _i19.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showConfirmationDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #confirmationTitle: confirmationTitle,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i21.DialogResponse?>.value())
          as _i12.Future<_i21.DialogResponse?>);
  @override
  void completeDialog(_i21.DialogResponse? response) =>
      super.noSuchMethod(Invocation.method(#completeDialog, [response]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackbarService extends _i1.Mock implements _i23.SnackbarService {
  @override
  void registerSnackbarConfig(_i24.SnackbarConfig? config) =>
      super.noSuchMethod(Invocation.method(#registerSnackbarConfig, [config]),
          returnValueForMissingStub: null);
  @override
  void registerCustomSnackbarconfig(
          {dynamic customData, _i24.SnackbarConfig? config}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomSnackbarconfig, [],
              {#customData: customData, #config: config}),
          returnValueForMissingStub: null);
  @override
  void registerCustomMainButtonBuilder(
          {dynamic variant,
          _i17.Widget Function(String?, Function?)? builder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomMainButtonBuilder, [],
              {#variant: variant, #builder: builder}),
          returnValueForMissingStub: null);
  @override
  void registerCustomSnackbarConfig(
          {dynamic variant,
          _i24.SnackbarConfig? config,
          _i24.SnackbarConfig Function()? configBuilder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomSnackbarConfig, [], {
            #variant: variant,
            #config: config,
            #configBuilder: configBuilder
          }),
          returnValueForMissingStub: null);
  @override
  void showSnackbar(
          {String? title = r'',
          String? message,
          dynamic Function(dynamic)? onTap,
          Duration? duration = const Duration(seconds: 3),
          String? mainButtonTitle,
          void Function()? onMainButtonTapped}) =>
      super.noSuchMethod(
          Invocation.method(#showSnackbar, [], {
            #title: title,
            #message: message,
            #onTap: onTap,
            #duration: duration,
            #mainButtonTitle: mainButtonTitle,
            #onMainButtonTapped: onMainButtonTapped
          }),
          returnValueForMissingStub: null);
  @override
  _i12.Future<dynamic>? showCustomSnackBar(
          {String? message,
          dynamic customData,
          dynamic variant,
          String? title,
          String? mainButtonTitle,
          void Function()? onMainButtonTapped,
          Function? onTap,
          Duration? duration = const Duration(seconds: 1)}) =>
      (super.noSuchMethod(Invocation.method(#showCustomSnackBar, [], {
        #message: message,
        #customData: customData,
        #variant: variant,
        #title: title,
        #mainButtonTitle: mainButtonTitle,
        #onMainButtonTapped: onMainButtonTapped,
        #onTap: onTap,
        #duration: duration
      })) as _i12.Future<dynamic>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i25.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i25.SheetBuilder>? builders) =>
      super.noSuchMethod(Invocation.method(#setCustomSheetBuilders, [builders]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<_i21.SheetResponse?> showBottomSheet(
          {String? title,
          String? description,
          String? confirmButtonTitle = r'Ok',
          String? cancelButtonTitle,
          bool? enableDrag = true,
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration}) =>
      (super.noSuchMethod(
              Invocation.method(#showBottomSheet, [], {
                #title: title,
                #description: description,
                #confirmButtonTitle: confirmButtonTitle,
                #cancelButtonTitle: cancelButtonTitle,
                #enableDrag: enableDrag,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration
              }),
              returnValue: Future<_i21.SheetResponse?>.value())
          as _i12.Future<_i21.SheetResponse?>);
  @override
  _i12.Future<_i21.SheetResponse?> showCustomSheet(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i22.Color? barrierColor = const _i22.Color(2315255808),
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          String? barrierLabel = r'',
          dynamic customData,
          bool? enableDrag = true,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomSheet, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #barrierLabel: barrierLabel,
                #customData: customData,
                #enableDrag: enableDrag,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration
              }),
              returnValue: Future<_i21.SheetResponse?>.value())
          as _i12.Future<_i21.SheetResponse?>);
  @override
  void completeSheet(_i21.SheetResponse? response) =>
      super.noSuchMethod(Invocation.method(#completeSheet, [response]),
          returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseAuthenticationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthenticationService extends _i1.Mock
    implements _i6.FirebaseAuthenticationService {
  @override
  _i5.FirebaseAuth get firebaseAuth =>
      (super.noSuchMethod(Invocation.getter(#firebaseAuth),
          returnValue: _FakeFirebaseAuth()) as _i5.FirebaseAuth);
  @override
  bool get hasUser =>
      (super.noSuchMethod(Invocation.getter(#hasUser), returnValue: false)
          as bool);
  @override
  _i12.Future<bool> emailExists(String? email) =>
      (super.noSuchMethod(Invocation.method(#emailExists, [email]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<_i6.FirebaseAuthenticationResult> signInWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signInWithGoogle, []),
              returnValue: Future<_i6.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i12.Future<_i6.FirebaseAuthenticationResult>);
  @override
  _i12.Future<bool> isAppleSignInAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAppleSignInAvailable, []),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<_i6.FirebaseAuthenticationResult> signInWithApple(
          {String? appleRedirectUri, String? appleClientId}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithApple, [], {
                #appleRedirectUri: appleRedirectUri,
                #appleClientId: appleClientId
              }),
              returnValue: Future<_i6.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i12.Future<_i6.FirebaseAuthenticationResult>);
  @override
  _i12.Future<_i6.FirebaseAuthenticationResult> loginAnonymously() =>
      (super.noSuchMethod(Invocation.method(#loginAnonymously, []),
              returnValue: Future<_i6.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i12.Future<_i6.FirebaseAuthenticationResult>);
  @override
  _i12.Future<_i6.FirebaseAuthenticationResult> loginWithEmail(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #loginWithEmail, [], {#email: email, #password: password}),
              returnValue: Future<_i6.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i12.Future<_i6.FirebaseAuthenticationResult>);
  @override
  _i12.Future<_i6.FirebaseAuthenticationResult> createAccountWithEmail(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#createAccountWithEmail, [],
                  {#email: email, #password: password}),
              returnValue: Future<_i6.FirebaseAuthenticationResult>.value(
                  _FakeFirebaseAuthenticationResult()))
          as _i12.Future<_i6.FirebaseAuthenticationResult>);
  @override
  _i12.Future<dynamic> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  _i12.Future<dynamic> sendResetPasswordLink(String? email) =>
      (super.noSuchMethod(Invocation.method(#sendResetPasswordLink, [email]),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  _i12.Future<dynamic> validatePassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#validatePassword, [password]),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  _i12.Future<dynamic> updatePassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [password]),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  String generateNonce([int? length = 32]) =>
      (super.noSuchMethod(Invocation.method(#generateNonce, [length]),
          returnValue: '') as String);
  @override
  String sha256ofString(String? input) =>
      (super.noSuchMethod(Invocation.method(#sha256ofString, [input]),
          returnValue: '') as String);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i26.NotificationService {
  @override
  _i12.Future<void> scheduleNotification(_i27.Subscription? subscription) =>
      (super.noSuchMethod(
          Invocation.method(#scheduleNotification, [subscription]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> deleteNotification(_i27.Subscription? subscription) =>
      (super.noSuchMethod(
          Invocation.method(#deleteNotification, [subscription]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i28.FileService {
  @override
  _i12.Future<String> getApplicationDocumentsDirectoryPath() =>
      (super.noSuchMethod(
          Invocation.method(#getApplicationDocumentsDirectoryPath, []),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<_i29.File?> getImage({bool? fromGallery = true}) =>
      (super.noSuchMethod(
          Invocation.method(#getImage, [], {#fromGallery: fromGallery}),
          returnValue: Future<_i29.File?>.value()) as _i12.Future<_i29.File?>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i30.ConnectivityService {
  @override
  _i12.Stream<bool> get connectivityStream =>
      (super.noSuchMethod(Invocation.getter(#connectivityStream),
          returnValue: Stream<bool>.empty()) as _i12.Stream<bool>);
  @override
  bool get serviceStopped => (super
          .noSuchMethod(Invocation.getter(#serviceStopped), returnValue: false)
      as bool);
  @override
  void start() => super.noSuchMethod(Invocation.method(#start, []),
      returnValueForMissingStub: null);
  @override
  void stop() => super.noSuchMethod(Invocation.method(#stop, []),
      returnValueForMissingStub: null);
  @override
  _i12.Future<bool> checkConnectivity() =>
      (super.noSuchMethod(Invocation.method(#checkConnectivity, []),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
}

/// A class which mocks [BrandService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBrandService extends _i1.Mock implements _i31.BrandService {}

/// A class which mocks [SubscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionService extends _i1.Mock
    implements _i32.SubscriptionService {
  @override
  _i12.Stream<List<_i27.Subscription>> fetchSubscriptions() =>
      (super.noSuchMethod(Invocation.method(#fetchSubscriptions, []),
              returnValue: Stream<List<_i27.Subscription>>.empty())
          as _i12.Stream<List<_i27.Subscription>>);
  @override
  dynamic addSubscription(_i27.Subscription? subscription) =>
      super.noSuchMethod(Invocation.method(#addSubscription, [subscription]));
  @override
  dynamic updateSubscription(_i27.Subscription? updatedSubscription) =>
      super.noSuchMethod(
          Invocation.method(#updateSubscription, [updatedSubscription]));
  @override
  dynamic deleteSubscription(String? subscriptionId) => super
      .noSuchMethod(Invocation.method(#deleteSubscription, [subscriptionId]));
  @override
  _i12.Future<List<_i27.Subscription>> getSubscriptions() =>
      (super.noSuchMethod(Invocation.method(#getSubscriptions, []),
              returnValue:
                  Future<List<_i27.Subscription>>.value(<_i27.Subscription>[]))
          as _i12.Future<List<_i27.Subscription>>);
}

/// A class which mocks [UrlLaunchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLaunchService extends _i1.Mock implements _i33.UrlLaunchService {
  @override
  _i12.Future<dynamic> makePhoneCall(String? phoneNumber) =>
      (super.noSuchMethod(Invocation.method(#makePhoneCall, [phoneNumber]),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  _i12.Future<dynamic> sendSms(String? phoneNumber) =>
      (super.noSuchMethod(Invocation.method(#sendSms, [phoneNumber]),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  _i12.Future<dynamic> launchUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#launchUrl, [url]),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i7.HiveInterface {
  @override
  void init(String? path) =>
      super.noSuchMethod(Invocation.method(#init, [path]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<_i7.Box<E>> openBox<E>(String? name,
          {_i7.HiveCipher? encryptionCipher,
          _i7.KeyComparator? keyComparator = _i34.defaultKeyComparator,
          _i7.CompactionStrategy? compactionStrategy =
              _i35.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          _i16.Uint8List? bytes,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #bytes: bytes,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i7.Box<E>>.value(_FakeBox<E>()))
          as _i12.Future<_i7.Box<E>>);
  @override
  _i12.Future<_i7.LazyBox<E>> openLazyBox<E>(String? name,
          {_i7.HiveCipher? encryptionCipher,
          _i7.KeyComparator? keyComparator = _i34.defaultKeyComparator,
          _i7.CompactionStrategy? compactionStrategy =
              _i35.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openLazyBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i7.LazyBox<E>>.value(_FakeLazyBox<E>()))
          as _i12.Future<_i7.LazyBox<E>>);
  @override
  _i7.Box<E> box<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#box, [name]),
          returnValue: _FakeBox<E>()) as _i7.Box<E>);
  @override
  _i7.LazyBox<E> lazyBox<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#lazyBox, [name]),
          returnValue: _FakeLazyBox<E>()) as _i7.LazyBox<E>);
  @override
  bool isBoxOpen(String? name) =>
      (super.noSuchMethod(Invocation.method(#isBoxOpen, [name]),
          returnValue: false) as bool);
  @override
  _i12.Future<void> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> deleteBoxFromDisk(String? name) =>
      (super.noSuchMethod(Invocation.method(#deleteBoxFromDisk, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(Invocation.method(#deleteFromDisk, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  List<int> generateSecureKey() =>
      (super.noSuchMethod(Invocation.method(#generateSecureKey, []),
          returnValue: <int>[]) as List<int>);
  @override
  _i12.Future<bool> boxExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#boxExists, [name]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
}

/// A class which mocks [BrandLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBrandLocalDataSource extends _i1.Mock
    implements _i36.BrandLocalDataSource {
  @override
  _i12.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i12.Future<void>);
}

/// A class which mocks [BrandRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBrandRemoteDataSource extends _i1.Mock
    implements _i37.BrandRemoteDataSource {}

/// A class which mocks [SubscriptionLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionLocalDataSource extends _i1.Mock
    implements _i38.SubscriptionLocalDataSource {
  @override
  _i12.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> cleanEverything() =>
      (super.noSuchMethod(Invocation.method(#cleanEverything, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  List<_i27.Subscription> getSubscriptionsOnce() =>
      (super.noSuchMethod(Invocation.method(#getSubscriptionsOnce, []),
          returnValue: <_i27.Subscription>[]) as List<_i27.Subscription>);
}

/// A class which mocks [SubscriptionRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionRemoteDataSource extends _i1.Mock
    implements _i39.SubscriptionRemoteDataSource {}

/// A class which mocks [BrandRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockBrandRepo extends _i1.Mock implements _i40.BrandRepo {
  @override
  _i12.Future<dynamic> fetchBrands({bool? forceFetch = false}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchBrands, [], {#forceFetch: forceFetch}),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
}

/// A class which mocks [SubscriptionRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionRepo extends _i1.Mock implements _i41.SubscriptionRepo {
  @override
  _i12.Future<_i12.Stream<List<_i27.Subscription>>> fetchSubscriptions(
          {bool? forceFetch = false}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchSubscriptions, [], {#forceFetch: forceFetch}),
          returnValue: Future<_i12.Stream<List<_i27.Subscription>>>.value(
              Stream<List<_i27.Subscription>>.empty())) as _i12
          .Future<_i12.Stream<List<_i27.Subscription>>>);
  @override
  _i12.Future<void> addSubscription({_i27.Subscription? subscription}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addSubscription, [], {#subscription: subscription}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> deleteSubscription({String? subscriptionId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #deleteSubscription, [], {#subscriptionId: subscriptionId}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> updateSubscription({_i27.Subscription? subscription}) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateSubscription, [], {#subscription: subscription}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
  @override
  List<_i27.Subscription> getSubscriptionsOnce() =>
      (super.noSuchMethod(Invocation.method(#getSubscriptionsOnce, []),
          returnValue: <_i27.Subscription>[]) as List<_i27.Subscription>);
  @override
  _i12.Future<void> cacheSubscriptions() =>
      (super.noSuchMethod(Invocation.method(#cacheSubscriptions, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i12.Future<void>);
}

/// A class which mocks [CalculationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculationService extends _i1.Mock
    implements _i42.CalculationService {
  @override
  _i12.Future<double> getTotalExpense(
          {bool? currentYear = true, bool? fromRemote = false}) =>
      (super.noSuchMethod(
          Invocation.method(#getTotalExpense, [],
              {#currentYear: currentYear, #fromRemote: fromRemote}),
          returnValue: Future<double>.value(0.0)) as _i12.Future<double>);
  @override
  _i12.Future<double> getCurrentMonthExpense({bool? fromRemote = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getCurrentMonthExpense, [], {#fromRemote: fromRemote}),
          returnValue: Future<double>.value(0.0)) as _i12.Future<double>);
  @override
  _i12.Future<Map<DateTime, double>> getGraphData({bool? fromRemote = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getGraphData, [], {#fromRemote: fromRemote}),
              returnValue:
                  Future<Map<DateTime, double>>.value(<DateTime, double>{}))
          as _i12.Future<Map<DateTime, double>>);
  @override
  _i12.Future<double> getExpenseOf(
          {DateTime? month, bool? fromRemote = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getExpenseOf, [], {#month: month, #fromRemote: fromRemote}),
          returnValue: Future<double>.value(0.0)) as _i12.Future<double>);
  @override
  _i12.Future<int?> calculateRemainingDays(_i27.Subscription? subscription) =>
      (super.noSuchMethod(
          Invocation.method(#calculateRemainingDays, [subscription]),
          returnValue: Future<int?>.value()) as _i12.Future<int?>);
}

/// A class which mocks [UIServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockUIServices extends _i1.Mock implements _i43.UIServices {
  @override
  set scrollController(dynamic value) =>
      super.noSuchMethod(Invocation.setter(#scrollController, value),
          returnValueForMissingStub: null);
  @override
  _i8.ScrollController get scrollController =>
      (super.noSuchMethod(Invocation.getter(#scrollController),
          returnValue: _FakeScrollController()) as _i8.ScrollController);
  @override
  _i9.AnimatorKey<dynamic> get animatorKey => (super.noSuchMethod(
      Invocation.getter(#animatorKey),
      returnValue: _FakeAnimatorKey<dynamic>()) as _i9.AnimatorKey<dynamic>);
}

/// A class which mocks [OnBoardingViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockOnBoardingViewModel extends _i1.Mock
    implements _i44.OnBoardingViewModel {
  @override
  _i10.NavigationService get $navigationService =>
      (super.noSuchMethod(Invocation.getter(#$navigationService),
          returnValue: _FakeNavigationService()) as _i10.NavigationService);
  @override
  bool get initialised =>
      (super.noSuchMethod(Invocation.getter(#initialised), returnValue: false)
          as bool);
  @override
  bool get onModelReadyCalled =>
      (super.noSuchMethod(Invocation.getter(#onModelReadyCalled),
          returnValue: false) as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  bool get isBusy =>
      (super.noSuchMethod(Invocation.getter(#isBusy), returnValue: false)
          as bool);
  @override
  bool get hasError =>
      (super.noSuchMethod(Invocation.getter(#hasError), returnValue: false)
          as bool);
  @override
  bool get anyObjectsBusy => (super
          .noSuchMethod(Invocation.getter(#anyObjectsBusy), returnValue: false)
      as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  dynamic navigate(int? index) =>
      super.noSuchMethod(Invocation.method(#navigate, [index]));
  @override
  bool busy(Object? object) => (super
          .noSuchMethod(Invocation.method(#busy, [object]), returnValue: false)
      as bool);
  @override
  dynamic error(Object? object) =>
      super.noSuchMethod(Invocation.method(#error, [object]));
  @override
  void setBusy(bool? value) =>
      super.noSuchMethod(Invocation.method(#setBusy, [value]),
          returnValueForMissingStub: null);
  @override
  void setError(dynamic error) =>
      super.noSuchMethod(Invocation.method(#setError, [error]),
          returnValueForMissingStub: null);
  @override
  bool hasErrorForKey(Object? key) =>
      (super.noSuchMethod(Invocation.method(#hasErrorForKey, [key]),
          returnValue: false) as bool);
  @override
  void clearErrors() => super.noSuchMethod(Invocation.method(#clearErrors, []),
      returnValueForMissingStub: null);
  @override
  void setBusyForObject(Object? object, bool? value) =>
      super.noSuchMethod(Invocation.method(#setBusyForObject, [object, value]),
          returnValueForMissingStub: null);
  @override
  void setErrorForObject(Object? object, dynamic value) =>
      super.noSuchMethod(Invocation.method(#setErrorForObject, [object, value]),
          returnValueForMissingStub: null);
  @override
  void onFutureError(dynamic error, Object? key) =>
      super.noSuchMethod(Invocation.method(#onFutureError, [error, key]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<T> runBusyFuture<T>(_i12.Future<T>? busyFuture,
          {Object? busyObject, bool? throwException = false}) =>
      (super.noSuchMethod(
          Invocation.method(#runBusyFuture, [busyFuture],
              {#busyObject: busyObject, #throwException: throwException}),
          returnValue: Future<T>.value(null)) as _i12.Future<T>);
  @override
  _i12.Future<T> runErrorFuture<T>(_i12.Future<T>? future,
          {Object? key, bool? throwException = false}) =>
      (super.noSuchMethod(
          Invocation.method(#runErrorFuture, [future],
              {#key: key, #throwException: throwException}),
          returnValue: Future<T>.value(null)) as _i12.Future<T>);
  @override
  void setInitialised(bool? value) =>
      super.noSuchMethod(Invocation.method(#setInitialised, [value]),
          returnValueForMissingStub: null);
  @override
  void setOnModelReadyCalled(bool? value) =>
      super.noSuchMethod(Invocation.method(#setOnModelReadyCalled, [value]),
          returnValueForMissingStub: null);
  @override
  _i11.StreamData<dynamic> setupStream<T>(_i12.Stream<T>? stream,
          {dynamic onData,
          dynamic onSubscribed,
          dynamic onError,
          dynamic onCancel,
          dynamic transformData}) =>
      (super.noSuchMethod(
          Invocation.method(#setupStream, [
            stream
          ], {
            #onData: onData,
            #onSubscribed: onSubscribed,
            #onError: onError,
            #onCancel: onCancel,
            #transformData: transformData
          }),
          returnValue: _FakeStreamData<dynamic>()) as _i11.StreamData<dynamic>);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i22.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i22.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}
